{
  "schema": {
    "type": "app_blueprint",
    "version": {
      "major": 0,
      "minor": 1
    },
    "origin": "Engines Developer Studio 0.2"
  },
  "metadata": {
    "blueprint": {
      "version": {
        "major": 0,
        "minor": 0,
        "level": "alpha",
        "patch": 0
      }
    },
    "timestamp": "2020-09-21T15:12:21+10:00"
  },
  "software": {
    "base": {
      "name": "consul",
      "framework": "base_c",
      "deployment_type": "worker",
      "http_protocol": "https_and_http",
      "memory": {
        "required": 100,
        "recommended": 100
      }
    },
    "scripts": {
      "start": {
        "language": "sh",
        "content": "#!/bin/sh\r\nconsul agent -retry-join $peer1 -retry-join $peer2  -config-file /home/app/consul.hcl &\r\nwait\r\nconsul leave"
      },
      "first_run": {
        "content": "#!/bin/sh\r\n\r\n\r\necho  encrypt = \\\"$secret\\\" >>/home/app/consul.hcl\r\n"
      }
    },
    "external_repositories": [
      {
        "source": "\"deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main\"",
        "key": "https://apt.releases.hashicorp.com/gpg"
      }
    ],
    "system_packages": [
      {
        "package": "consul"
      },
      {
        "package": "vim"
      }
    ],
    "service_configurations": [
      {
        "publisher_namespace": "EnginesSystem",
        "type_path": "filesystem/local/filesystem",
        "variables": {
          "service_name": "_Engines_Builder(engine_name)",
          "volume_src": "",
          "engine_path": "/home/fs/consul",
          "permissions": "rw",
          "user": "_Engines_Builder(cont_user_id)",
          "group": "_Engines_Builder(data_gid)",
          "fw_user": "_Engines_Builder(cont_user_id)",
          "exclude_from_backup": "false"
        }
      },
      {
        "publisher_namespace": "EnginesSystem",
        "type_path": "secrets",
        "variables": {
          "secret_name": "consul_secret",
          "is_secret": "true",
          "length": "32",
          "mutable": "false"
        }
      }
    ],
    "environment_variables": [
      {
        "name": "secret",
        "mandatory": true,
        "ask_at_build_time": true,
        "input": {
          "type": "string"
        }
      },
      {
        "name": "peer1",
        "mandatory": true,
        "ask_at_build_time": true,
        "input": {
          "type": "string"
        }
      },
      {
        "name": "peer2",
        "mandatory": true,
        "ask_at_build_time": true,
        "input": {
          "type": "string"
        }
      }
    ],
    "template_files": [
      {
        "path": "/home/app/consul.hcl",
        "content": "# Full configuration options can be found at https://www.consul.io/docs/agent/options.html\r\n\r\n# datacenter\r\n# This flag controls the datacenter in which the agent is running. If not provided,\r\n# it defaults to \"dc1\". Consul has first-class support for multiple datacenters, but \r\n# it relies on proper configuration. Nodes in the same datacenter should be on a \r\n# single LAN.\r\ndatacenter = \"dc-engines-internal\"\r\n\r\n# data_dir\r\n# This flag provides a data directory for the agent to store state. This is required\r\n# for all agents. The directory should be durable across reboots. This is especially\r\n# critical for agents that are running in server mode as they must be able to persist\r\n# cluster state. Additionally, the directory must support the use of filesystem\r\n# locking, meaning some types of mounted folders (e.g. VirtualBox shared folders) may\r\n# not be suitable.\r\ndata_dir = \"/home/fs/consul\"\r\n\r\n# client_addr\r\n# The address to which Consul will bind client interfaces, including the HTTP and DNS\r\n# servers. By default, this is \"127.0.0.1\", allowing only loopback connections. In\r\n# Consul 1.0 and later this can be set to a space-separated list of addresses to bind\r\n# to, or a go-sockaddr template that can potentially resolve to multiple addresses.\r\nclient_addr = \"0.0.0.0\"\r\n\r\n# ui\r\n# Enables the built-in web UI server and the required HTTP routes. This eliminates\r\n# the need to maintain the Consul web UI files separately from the binary.\r\nui = true\r\n\r\n# server\r\n# This flag is used to control if an agent is in server or client mode. When provided,\r\n# an agent will act as a Consul server. Each Consul cluster must have at least one\r\n# server and ideally no more than 5 per datacenter. All servers participate in the Raft\r\n# consensus algorithm to ensure that transactions occur in a consistent, linearizable\r\n# manner. Transactions modify cluster state, which is maintained on all server nodes to\r\n# ensure availability in the case of node failure. Server nodes also participate in a\r\n# WAN gossip pool with server nodes in other datacenters. Servers act as gateways to\r\n# other datacenters and forward traffic as appropriate.\r\nserver = true\r\n\r\n# bootstrap_expect\r\n# encrypt\r\n# Specifies the secret key to use for encryption of Consul network traffic. This key must\r\n# be 32-bytes that are Base64-encoded. The easiest way to create an encryption key is to\r\n# use consul keygen. All nodes within a cluster must share the same encryption key to\r\n# communicate. The provided key is automatically persisted to the data directory and loaded\r\n# automatically whenever the agent is restarted. This means that to encrypt Consul's gossip\r\n# protocol, this option only needs to be provided once on each agent's initial startup\r\n# sequence. If it is provided after Consul has been initialized with an encryption key,\r\n# then the provided key is ignored and a warning will be displayed.\r\n#encrypt = \"...\"\r\n\r\n"
      }
    ],
    "file_write_permissions": [
      {
        "path": "/home/app/consul.hcl"
      }
    ]
  }
}
